(define (domain floortile)
    (:requirements :derived-predicates :existential-preconditions :negative-preconditions :typing)
    (:types color robot tile - object)
    (:predicates (available-color ?c - color)  (available-color_AG ?c - color)  (available-color_G ?c - color)  (available-color_UG ?c - color)  (change_color_ ?r - robot ?c - color ?c2 - color)  (clear ?x - tile)  (clear_AG ?x - tile)  (clear_G ?x - tile)  (clear_UG ?x - tile)  (deadend) (derivable_change_color) (derivable_move_down) (derivable_move_left) (derivable_move_right) (derivable_move_up) (derivable_paint_down) (derivable_paint_up) (down ?x - tile ?y - tile)  (down_AG ?x - tile ?y - tile)  (down_G ?x - tile ?y - tile)  (down_UG ?x - tile ?y - tile)  (free-color ?r - robot)  (free-color_AG ?r - robot)  (free-color_G ?r - robot)  (free-color_UG ?r - robot)  (left ?x - tile ?y - tile)  (left_AG ?x - tile ?y - tile)  (left_G ?x - tile ?y - tile)  (left_UG ?x - tile ?y - tile)  (move_down_ ?r - robot ?x - tile ?y - tile)  (move_left_ ?r - robot ?x - tile ?y - tile)  (move_right_ ?r - robot ?x - tile ?y - tile)  (move_up_ ?r - robot ?x - tile ?y - tile)  (paint_down_ ?r - robot ?y - tile ?x - tile ?c - color)  (paint_up_ ?r - robot ?y - tile ?x - tile ?c - color)  (painted ?x - tile ?c - color)  (painted_AG ?x - tile ?c - color)  (painted_G ?x - tile ?c - color)  (painted_UG ?x - tile ?c - color)  (right ?x - tile ?y - tile)  (right_AG ?x - tile ?y - tile)  (right_G ?x - tile ?y - tile)  (right_UG ?x - tile ?y - tile)  (robot-at ?r - robot ?x - tile)  (robot-at_AG ?r - robot ?x - tile)  (robot-at_G ?r - robot ?x - tile)  (robot-at_UG ?r - robot ?x - tile)  (robot-has ?r - robot ?c - color)  (robot-has_AG ?r - robot ?c - color)  (robot-has_G ?r - robot ?c - color)  (robot-has_UG ?r - robot ?c - color)  (up ?x - tile ?y - tile)  (up_AG ?x - tile ?y - tile)  (up_G ?x - tile ?y - tile)  (up_UG ?x - tile ?y - tile))
    (:derived (available-color_AG ?c - color) (and (available-color ?c) (available-color_G ?c)))
     (:derived (available-color_UG ?c - color) (and (not (available-color ?c)) (available-color_G ?c)))
     (:derived (change_color_ ?R - robot ?C - color ?C2 - color) (not (deadend)))
     (:derived (clear_AG ?x - tile) (and (clear ?x) (clear_G ?x)))
     (:derived (clear_UG ?x - tile) (and (not (clear ?x)) (clear_G ?x)))
     (:derived (deadend) (exists (?T1 ?T2 ?C1 ?C2) (and (painted_AG ?T1 ?C1) (painted_UG ?T2 ?C2) (up ?T2 ?T1))))
     (:derived (derivable_change_color) (exists (?r - robot ?c2 - color ?c - color) (and (robot-has ?r ?c) (available-color ?c2) (change_color_ ?r ?c ?c2))))
     (:derived (derivable_move_down) (exists (?r - robot ?y - tile ?x - tile) (and (robot-at ?r ?x) (down ?y ?x) (clear ?y) (move_down_ ?r ?x ?y))))
     (:derived (derivable_move_left) (exists (?r - robot ?y - tile ?x - tile) (and (robot-at ?r ?x) (left ?y ?x) (clear ?y) (move_left_ ?r ?x ?y))))
     (:derived (derivable_move_right) (exists (?r - robot ?y - tile ?x - tile) (and (robot-at ?r ?x) (right ?y ?x) (clear ?y) (move_right_ ?r ?x ?y))))
     (:derived (derivable_move_up) (exists (?r - robot ?y - tile ?x - tile) (and (robot-at ?r ?x) (up ?y ?x) (clear ?y) (move_up_ ?r ?x ?y))))
     (:derived (derivable_paint_down) (exists (?r - robot ?y - tile ?x - tile ?c - color) (and (robot-has ?r ?c) (robot-at ?r ?x) (down ?y ?x) (clear ?y) (paint_down_ ?r ?y ?x ?c))))
     (:derived (derivable_paint_up) (exists (?r - robot ?y - tile ?x - tile ?c - color) (and (robot-has ?r ?c) (robot-at ?r ?x) (up ?y ?x) (clear ?y) (paint_up_ ?r ?y ?x ?c))))
     (:derived (down_AG ?x - tile ?y - tile) (and (down ?x ?y) (down_G ?x ?y)))
     (:derived (down_UG ?x - tile ?y - tile) (and (not (down ?x ?y)) (down_G ?x ?y)))
     (:derived (free-color_AG ?r - robot) (and (free-color ?r) (free-color_G ?r)))
     (:derived (free-color_UG ?r - robot) (and (not (free-color ?r)) (free-color_G ?r)))
     (:derived (left_AG ?x - tile ?y - tile) (and (left ?x ?y) (left_G ?x ?y)))
     (:derived (left_UG ?x - tile ?y - tile) (and (not (left ?x ?y)) (left_G ?x ?y)))
     (:derived (move_down_ ?R - robot ?X - tile ?Y - tile) (not (deadend)))
     (:derived (move_left_ ?R - robot ?X - tile ?Y - tile) (not (deadend)))
     (:derived (move_right_ ?R - robot ?X - tile ?Y - tile) (not (deadend)))
     (:derived (move_up_ ?R - robot ?X - tile ?Y - tile) (not (deadend)))
     (:derived (paint_down_ ?R - robot ?Y - tile ?X - tile ?C - color) (and (not (deadend)) (painted_UG ?Y ?C)))
     (:derived (paint_up_ ?R - robot ?Y - tile ?X - tile ?C - color) (and (not (deadend)) (painted_UG ?Y ?C)))
     (:derived (painted_AG ?x - tile ?c - color) (and (painted ?x ?c) (painted_G ?x ?c)))
     (:derived (painted_UG ?x - tile ?c - color) (and (not (painted ?x ?c)) (painted_G ?x ?c)))
     (:derived (right_AG ?x - tile ?y - tile) (and (right ?x ?y) (right_G ?x ?y)))
     (:derived (right_UG ?x - tile ?y - tile) (and (not (right ?x ?y)) (right_G ?x ?y)))
     (:derived (robot-at_AG ?r - robot ?x - tile) (and (robot-at ?r ?x) (robot-at_G ?r ?x)))
     (:derived (robot-at_UG ?r - robot ?x - tile) (and (not (robot-at ?r ?x)) (robot-at_G ?r ?x)))
     (:derived (robot-has_AG ?r - robot ?c - color) (and (robot-has ?r ?c) (robot-has_G ?r ?c)))
     (:derived (robot-has_UG ?r - robot ?c - color) (and (not (robot-has ?r ?c)) (robot-has_G ?r ?c)))
     (:derived (up_AG ?x - tile ?y - tile) (and (up ?x ?y) (up_G ?x ?y)))
     (:derived (up_UG ?x - tile ?y - tile) (and (not (up ?x ?y)) (up_G ?x ?y)))
    (:action change_color
        :parameters (?r - robot ?c - color ?c2 - color)
        :precondition (and (robot-has ?r ?c) (available-color ?c2) (change_color_ ?r ?c ?c2))
        :effect (and (not (robot-has ?r ?c)) (robot-has ?r ?c2))
    )
     (:action move_down
        :parameters (?r - robot ?x - tile ?y - tile)
        :precondition (and (robot-at ?r ?x) (down ?y ?x) (clear ?y) (move_down_ ?r ?x ?y))
        :effect (and (robot-at ?r ?y) (not (robot-at ?r ?x)) (clear ?x) (not (clear ?y)))
    )
     (:action move_left
        :parameters (?r - robot ?x - tile ?y - tile)
        :precondition (and (robot-at ?r ?x) (left ?y ?x) (clear ?y) (move_left_ ?r ?x ?y))
        :effect (and (robot-at ?r ?y) (not (robot-at ?r ?x)) (clear ?x) (not (clear ?y)))
    )
     (:action move_right
        :parameters (?r - robot ?x - tile ?y - tile)
        :precondition (and (robot-at ?r ?x) (right ?y ?x) (clear ?y) (move_right_ ?r ?x ?y))
        :effect (and (robot-at ?r ?y) (not (robot-at ?r ?x)) (clear ?x) (not (clear ?y)))
    )
     (:action move_up
        :parameters (?r - robot ?x - tile ?y - tile)
        :precondition (and (robot-at ?r ?x) (up ?y ?x) (clear ?y) (move_up_ ?r ?x ?y))
        :effect (and (robot-at ?r ?y) (not (robot-at ?r ?x)) (clear ?x) (not (clear ?y)))
    )
     (:action paint_down
        :parameters (?r - robot ?y - tile ?x - tile ?c - color)
        :precondition (and (robot-has ?r ?c) (robot-at ?r ?x) (down ?y ?x) (clear ?y) (paint_down_ ?r ?y ?x ?c))
        :effect (and (not (clear ?y)) (painted ?y ?c))
    )
     (:action paint_up
        :parameters (?r - robot ?y - tile ?x - tile ?c - color)
        :precondition (and (robot-has ?r ?c) (robot-at ?r ?x) (up ?y ?x) (clear ?y) (paint_up_ ?r ?y ?x ?c))
        :effect (and (not (clear ?y)) (painted ?y ?c))
    )
)