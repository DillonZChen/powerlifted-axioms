(define (domain miconic)
    (:requirements :derived-predicates :existential-preconditions :negative-preconditions :strips :typing)
    (:types floor passenger - object)
    (:predicates (above ?floor1 - floor ?floor2 - floor)  (above_AG ?floor1 - floor ?floor2 - floor)  (above_G ?floor1 - floor ?floor2 - floor)  (above_UG ?floor1 - floor ?floor2 - floor)  (boarded ?person - passenger)  (boarded_AG ?person - passenger)  (boarded_G ?person - passenger)  (boarded_UG ?person - passenger)  (depart_ ?f - floor ?p - passenger)  (derivable_board) (derivable_depart) (derivable_down) (derivable_up) (destin ?person - passenger ?floor - floor)  (destin_AG ?person - passenger ?floor - floor)  (destin_G ?person - passenger ?floor - floor)  (destin_UG ?person - passenger ?floor - floor)  (down_ ?f1 - floor ?f2 - floor)  (lift-at ?floor - floor)  (lift-at_AG ?floor - floor)  (lift-at_G ?floor - floor)  (lift-at_UG ?floor - floor)  (origin ?person - passenger ?floor - floor)  (origin_AG ?person - passenger ?floor - floor)  (origin_G ?person - passenger ?floor - floor)  (origin_UG ?person - passenger ?floor - floor)  (served ?person - passenger)  (served_AG ?person - passenger)  (served_G ?person - passenger)  (served_UG ?person - passenger)  (up_ ?f1 - floor ?f2 - floor))
    (:derived (above_AG ?floor1 - floor ?floor2 - floor) (and (above ?floor1 ?floor2) (above_G ?floor1 ?floor2)))
     (:derived (above_UG ?floor1 - floor ?floor2 - floor) (and (not (above ?floor1 ?floor2)) (above_G ?floor1 ?floor2)))
     (:derived (boarded_AG ?person - passenger) (and (boarded ?person) (boarded_G ?person)))
     (:derived (boarded_UG ?person - passenger) (and (not (boarded ?person)) (boarded_G ?person)))
     (:derived (depart_ ?F - floor ?P - passenger) (served_UG ?P))
     (:derived (derivable_board) (exists (?p - passenger ?f - floor) (and (lift-at ?f) (origin ?p ?f))))
     (:derived (derivable_depart) (exists (?p - passenger ?f - floor) (and (lift-at ?f) (destin ?p ?f) (boarded ?p) (depart_ ?f ?p))))
     (:derived (derivable_down) (exists (?f2 - floor ?f1 - floor) (and (lift-at ?f1) (above ?f2 ?f1) (down_ ?f1 ?f2))))
     (:derived (derivable_up) (exists (?f2 - floor ?f1 - floor) (and (lift-at ?f1) (above ?f1 ?f2) (up_ ?f1 ?f2))))
     (:derived (destin_AG ?person - passenger ?floor - floor) (and (destin ?person ?floor) (destin_G ?person ?floor)))
     (:derived (destin_UG ?person - passenger ?floor - floor) (and (not (destin ?person ?floor)) (destin_G ?person ?floor)))
     (:derived (down_ ?F1 - floor ?F2 - floor) (exists (?P ?F3) (and (not (derivable_board)) (not (derivable_depart)) (served_UG ?P) (origin ?P ?F2) (destin ?P ?F3))))
     (:derived (down_ ?F1 - floor ?F2 - floor) (exists (?P) (and (not (derivable_board)) (not (derivable_depart)) (served_UG ?P) (boarded ?P) (destin ?P ?F2))))
     (:derived (lift-at_AG ?floor - floor) (and (lift-at ?floor) (lift-at_G ?floor)))
     (:derived (lift-at_UG ?floor - floor) (and (not (lift-at ?floor)) (lift-at_G ?floor)))
     (:derived (origin_AG ?person - passenger ?floor - floor) (and (origin ?person ?floor) (origin_G ?person ?floor)))
     (:derived (origin_UG ?person - passenger ?floor - floor) (and (not (origin ?person ?floor)) (origin_G ?person ?floor)))
     (:derived (served_AG ?person - passenger) (and (served ?person) (served_G ?person)))
     (:derived (served_UG ?person - passenger) (and (not (served ?person)) (served_G ?person)))
     (:derived (up_ ?F1 - floor ?F2 - floor) (exists (?P ?F3) (and (not (derivable_board)) (not (derivable_depart)) (served_UG ?P) (origin ?P ?F2) (destin ?P ?F3))))
     (:derived (up_ ?F1 - floor ?F2 - floor) (exists (?P) (and (not (derivable_board)) (not (derivable_depart)) (served_UG ?P) (boarded ?P) (destin ?P ?F2))))
    (:action board
        :parameters (?f - floor ?p - passenger)
        :precondition (and (lift-at ?f) (origin ?p ?f))
        :effect (and (boarded ?p) (not (origin ?p ?f)))
    )
     (:action depart
        :parameters (?f - floor ?p - passenger)
        :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p) (depart_ ?f ?p))
        :effect (and (not (boarded ?p)) (served ?p))
    )
     (:action down
        :parameters (?f1 - floor ?f2 - floor)
        :precondition (and (lift-at ?f1) (above ?f2 ?f1) (down_ ?f1 ?f2))
        :effect (and (lift-at ?f2) (not (lift-at ?f1)))
    )
     (:action up
        :parameters (?f1 - floor ?f2 - floor)
        :precondition (and (lift-at ?f1) (above ?f1 ?f2) (up_ ?f1 ?f2))
        :effect (and (lift-at ?f2) (not (lift-at ?f1)))
    )
)